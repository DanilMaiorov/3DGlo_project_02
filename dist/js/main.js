/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_timer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/timer */ \"./modules/timer.js\");\n/* harmony import */ var _modules_menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/menu */ \"./modules/menu.js\");\n/* harmony import */ var _modules_modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/modal */ \"./modules/modal.js\");\n/* harmony import */ var _modules_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/validation */ \"./modules/validation.js\");\n/* harmony import */ var _modules_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/tabs */ \"./modules/tabs.js\");\n/* harmony import */ var _modules_slider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/slider */ \"./modules/slider.js\");\n/* harmony import */ var _modules_calculator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/calculator */ \"./modules/calculator.js\");\n/* harmony import */ var _modules_sendForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/sendForm */ \"./modules/sendForm.js\");\n\n\n\n\n\n\n\n\n\n\n(0,_modules_timer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('00:00:00 31 July 2022');\n(0,_modules_menu__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n(0,_modules_modal__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n(0,_modules_validation__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n(0,_modules_tabs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n(0,_modules_slider__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n(0,_modules_calculator__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(100); //передадим в функцию стоимость одного квадратного метра площади\n(0,_modules_sendForm__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({ formId: 'form1', someElem: [\n    {\n        type: 'block',\n        id: 'total'\n\n    }\n] }) //передадим объект, у которого будет formId и добавим массив someElem? который будет содержать какие либо данные из каких либо полей, например калькулятор, или другой инпут\n;(0,_modules_sendForm__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({ formId: 'form2', someElem: [\n    {\n       type: 'input',\n       id: 'form2-message' \n    }\n] })\n;(0,_modules_sendForm__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({ formId: 'form3' }) \n\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./modules/calculator.js":
/*!*******************************!*\
  !*** ./modules/calculator.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"./modules/helpers.js\");\n//LESSON24\n//САМОЕ ВАЖНОЕ ПРИ НАПИСАНИИ КАЛЬКУЛЯТОРА ЯВЛЯЮТСЯ ФОРМУЛЫ ДЛЯ РАСЧЁТА\n//РЕАЛИЗАЦИЯ РАСЧЁТА ТИПОВ ПЛОЩАДИ\n\n\n\n const calc = (price = 100) => { \n        const calcBlock = document.querySelector('.calc-block');\n        const calcType = document.querySelector('.calc-type');\n        const calcSquare = document.querySelector('.calc-square');\n        const calcCount = document.querySelector('.calc-count');\n        const calcDay = document.querySelector('.calc-day');\n        const total = document.querySelector('#total');\n        let totalValue = 0; \n        let interval;\n\n        const countCalc = () => { \n\n            const calcTypeValue = +calcType.options[calcType.selectedIndex].value; \n            const calcSquareValue = calcSquare.value;\n                        \n            let calcCountValue = 1;\n            let calcDayValue = 1; \n            \n            if (calcCount.value > 1) { \n                calcCountValue += +calcCount.value / 10;\n            }\n            if (calcDay.value && calcDay.value < 5) { \n                calcDayValue = 2; \n            } else if (calcDay.value && calcDay.value < 10) {\n                calcDayValue = 1.5;\n            }\n            if (calcType.value && calcSquare.value) { \n            totalValue = price * calcTypeValue * calcSquareValue * calcCountValue * calcDayValue;       \n            } else { \n                totalValue = 0;\n            }\n            return totalValue;\n        };\n        calcBlock.addEventListener('change', (e) => { \n            if (e.target === calcType || e.target === calcSquare ||\n                e.target === calcCount || e.target === calcDay) { \n                clearInterval(interval);\n                countCalc();\n\n                (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.animate)({\n                    duration: 2200,\n                    timing(timeFraction) {\n                    return 1 - Math.sin(Math.acos(timeFraction));\n                    },\n                    draw(progress) {\n                        total.textContent = Math.round(totalValue * progress);\n                    }\n                });\n/*                     const time = 1500;\n                    const step = 100;                \n                    let n = 0;\n                    let count = Math.round(time / (totalValue / step));\n                        if (totalValue !== 0) {\n                        interval = setInterval(() => {\n                            n += step;\n                            if (n === totalValue || n > totalValue) {\n                                clearInterval(interval);\n                                n = totalValue;\n                            }\n                            total.textContent = n;\n                        }, count);\n                    }  \n                    console.log(totalValue); */\n                }\n        });  \n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (calc);\n\n/*\nconst calc = (price = 100) => { //примем параметр, который передали в вызове функции, будет приниматься если мы не будем передавать значение в вызове\n\n     //РАБОТАТЬ БУДЕМ ЧЕРЕЗ ДЕЛЕГИРОВАНИЕ\n    const calcBlock = document.querySelector('.calc-block'); //получим блок калькулятора\n    const calcType = document.querySelector('.calc-type'); //получим поле ввода селекта\n    const calcSquare = document.querySelector('.calc-square');//получим поле ввода площади\n    const calcCount = document.querySelector('.calc-count');//получим поле ввода количества помещений\n    const calcDay = document.querySelector('.calc-day');//получим поле ввода срока\n    const total = document.querySelector('#total');\n\n    //анимация перебор цифр\n\n    const time = 200;  //ремя за которое будет выводиться число\n    const step = 100;   // шаг, с которым будет выводиться число\n\n    const countCalc = () => { //создадим функцию, которая будет считать итоговую стоимость\n        // первым делом создаем переменную, в которую вносим значения нашего селекта\n        const calcTypeValue = +calcType.options[calcType.selectedIndex].value; \n        //options это коллекция(массив), поэтому обращаемся к индексу в котором прописываем то свойство, которое хотим получить\n        //и уже после мы можем дотянуться к свойству value для расчёта\n        //console.dir(calcType.options[calcType.selectedIndex].value) и вставим это всё в переменную\n\n        // переменная значения площади\n        const calcSquareValue = calcSquare.value;\n        \n        let totalValue = 0 //создадим изеняемую переменную, которую буде заносить этот тотал в спан\n        let calcCountValue = 1 //создадим изеняемую переменную значения количества помещений, которая по умолчанию равна 1 и добавим еще одно условие согласно ТЗ\n        let calcDayValue = 1 //создадим изеняемую переменную значения количества дней, для которой нужно условие\n        if (calcCount.value > 1) { // условие для количества помещений\n            calcCountValue += +calcCount.value / 10;\n        }\n        if (calcDay.value && calcDay.value < 5) { // условие для количества дней, если значение дней существует и равно определенному количеству\n            calcDayValue = 2; //то принимаем значение для расчёта\n        } else if (calcDay.value && calcDay.value < 10) {\n            calcDayValue = 1.5;\n        }\n        if (calcType.value && calcSquare.value) { //проверка на то, что эти данные у нас существуют и если они существуют \n        totalValue = price * calcTypeValue * calcSquareValue * calcCountValue * calcDayValue;//то мы ведем расчёт\n        outNum (totalValue, total); //вызовем функцию анимации   \n        } else { //в ином случае в totalValue будет заноситься 0\n            totalValue = 0\n        }\n        total.textContent = totalValue; //значение totalValue будет заноситься в текстовое содержимое спана total\n    };\n    //повешаем на весь блок калькулятора обработчик события, можно выбрать или change или input\n\n    calcBlock.addEventListener('input', (e) => { //для начала выберем инпут, так удобнее в плане тестирования, потом изменим на change\n        //countCalc(); //при каждом изменении в поле ввода будем вызывать функцию подсчета\n        if (e.target === calcType || e.target === calcSquare\n           || e.target === calcCount || e.target === calcDay) { //только в том случае, если e.target = calcType и остальным полям ввода мы будем вызывать функцию countCalc, если появятся другие поля, то они не будут отрабатывать\n            countCalc();\n        }\n    const outNum = (num, elem) => { //num - число, которое будем выводить, elem - куда будем выводить\n        //let e = document.querySelector('#total'); //переменная, куда будем выводить число,\n        let n = 0; //переменная, которая говорит о том, с какого числа начинаем считать\n        let count = Math.round(time / (num / step));//нужно посчитать сколько шагов от начального числа до конечного\n        let interval = setInterval(() => {\n            n += + step //наращиваем наше число\n            if (n === num) { //если n равно введенному числу, то заканчиваем интервал\n                clearInterval(interval);\n            }\n            total.textContent = n\n        }, count); //задаем интервал\n    }\n    });  \n};\nexport default calc; */\n\n//# sourceURL=webpack:///./modules/calculator.js?");

/***/ }),

/***/ "./modules/helpers.js":
/*!****************************!*\
  !*** ./modules/helpers.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"animate\": () => (/* binding */ animate)\n/* harmony export */ });\nconst animate = ({timing, draw, duration}) => {\n     \n    let start = performance.now();\n\n    requestAnimationFrame(function animate(time) {\n        \n        let timeFraction = (time - start) / duration;\n        if (timeFraction > 1) timeFraction = 1;\n\n        let progress = timing(timeFraction)\n\n        draw(progress);\n\n        if (timeFraction < 1) {\n            requestAnimationFrame(animate);\n        }\n    });\n\n}\n\n\n\n\n//# sourceURL=webpack:///./modules/helpers.js?");

/***/ }),

/***/ "./modules/menu.js":
/*!*************************!*\
  !*** ./modules/menu.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst menu = () => {\n    const menuBtn = document.querySelector('.menu');\n    const menu = document.querySelector('menu');\n    const closeBtn = menu.querySelector('.close-btn');\n    const menuItems = menu.querySelectorAll('ul > li > a');\n    const body = document.querySelector('body');\n\n     const toggleMenu = () => {\n        body.addEventListener('click', (e) => {\n            if (e.target.closest('.menu')) {\n                menu.classList.add('active-menu');\n            } else if (e.target.closest('.close-btn')) {\n                menu.classList.remove('active-menu');  \n            } else if (e.target.closest('menu')) {\n                menuItems.forEach((menuItem) => {\n                    if(menuItem === e.target) {\n                        e.preventDefault();\n                        let idAnchor = menuItem.getAttribute('href');\n                        document.querySelector(idAnchor).scrollIntoView({\n                            block: 'start',\n                            behavior: 'smooth'\n                        });\n                        menu.classList.remove('active-menu');\n                    } \n                });\n             } else if (!e.target.closest('menu')) {\n                menu.classList.remove('active-menu'); \n            }\n            });\n    };\n    toggleMenu(); \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n   \n    const scrollImg = document.querySelector('main > a');   \n    const serviceBlock = document.querySelector('#service-block');\n    \n    const clicker = (e) => {\n        e.preventDefault();\n        serviceBlock.scrollIntoView({block: 'start', behavior: 'smooth'});\n    };\n    scrollImg.addEventListener('click', clicker); \n     \n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (menu);\n\n//# sourceURL=webpack:///./modules/menu.js?");

/***/ }),

/***/ "./modules/modal.js":
/*!**************************!*\
  !*** ./modules/modal.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"./modules/helpers.js\");\n\n\n\nconst modal = () => {\n\n    const modal = document.querySelector('.popup');\n    const buttons = document.querySelectorAll('.popup-btn');\n    //const closeBtn = modal.querySelector('.popup-close'); //можем его удалить, потому как получаем его теперь в обработчике события при закрытии модального окна\n    const screenWidth = document.documentElement;\n    \n    buttons.forEach(btn => { \n        btn.addEventListener('click', () => {\n            if (screenWidth.offsetWidth > 768 ) {\n                (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.animate)({\n                    duration: 500,\n                    timing(timeFraction) {\n                    return timeFraction;\n                    },\n                    draw(progress) {\n                        modal.style.display = 'block';\n                        modal.style.opacity = progress; \n                    }\n                });\n            } else {\n                modal.style.opacity = '1';\n                modal.style.display = 'block';\n            }\n        });\n    });  \n    modal.addEventListener('click', (e) => {\n        if (!e.target.closest('.popup-content') || e.target.classList.contains('popup-close')) {\n            if (screenWidth.offsetWidth > 768 ) {\n                (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.animate)({\n                    duration: 500,\n                    timing(timeFraction) {\n                    return timeFraction;\n                    },\n                    draw(progress) {\n                        modal.style.opacity = 1 - progress; \n                        setTimeout(() => {\n                            modal.style.display = 'none';\n                        }, 500);\n                    } \n                  });\n        } else {\n            modal.style.display = 'none';\n        }\n    };\n});\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (modal);\n\n\n/*\nbuttons.forEach(btn => { \n        btn.addEventListener('click', () => {\n\n            if(screenWidth.offsetWidth < 768) {\n                modal.style.opacity = '1';\n                modal.style.display = 'block';\n            } else {\n                modal.style.opacity = '0'; \n                modal.style.display = 'block';\n                setTimeout(() => {\n                    modal.style.opacity = '1'; \n                    modal.style.transition = '.6s all';\n                }, 1);\n            }\n        });\n    });\n\n/*     closeBtn.addEventListener('click', () => {  //сделали делигирование событий на всё модальное окно сразу\n        if(screenWidth.offsetWidth < 768) {\n            modal.style.display = 'none';\n        } else {\n            modal.style.opacity = '0';\n            modal.style.transition = '.6s all';\n                setTimeout(() => {\n                    modal.style.display = 'none';\n                }, 600);\n        }\n    }); \n\n    modal.addEventListener('click', (e) => {\n        if (!e.target.closest('.popup-content') || e.target.classList.contains('popup-close')) {\n            if (screenWidth.offsetWidth < 768) {\n                modal.style.display = 'none';\n            } else {\n                modal.style.opacity = '0';\n                modal.style.transition = '.6s all';\n                    setTimeout(() => {\n                        modal.style.display = 'none';\n                    }, 600);\n            }\n        }\n    });*/\n\n//# sourceURL=webpack:///./modules/modal.js?");

/***/ }),

/***/ "./modules/sendForm.js":
/*!*****************************!*\
  !*** ./modules/sendForm.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n//модуль для отправки форм\n\nconst sendForm = ({ formId, someElem = [] }) => {\n    const form = document.getElementById(formId)\n    const statusBlock = document.createElement('div') \n        const loadText = 'Загрузка...'\n        const errorText = 'Ошибка...'\n        const successText = 'Спасибо! Наш менеджер с вами свяжется'\n            \n\n        /***ВАРИАНТ ВАЛИДАЦИИ ЧЕРЕЗ УСЛОВИЯ****/\n    const validate = (list) => {\n        let success = false \n            const testPhone = /^[0-9()-\\+]+/;\n            const testName = /^[а-яё ]+$/i\n            const testMessage =/^[а-яё0-9 \\-\\?!.,;:]+$/gi \n\n            let nameInput\n            let testNameInput\n            let emailInput\n            let phoneInput\n            let testPhoneInput\n            let messageInput\n            let testMessageInput\n\n          list.forEach(input => {\n\n            if(input.closest('[name=user_name]')) {\n                nameInput = input.closest('[name=user_name]')\n                nameInput = nameInput.value\n            }\n            if(input.closest('[name=user_phone]')) {\n                phoneInput = input.closest('[name=user_phone]')\n                phoneInput = phoneInput.value\n            }   \n            if(input.closest('[name=user_email]')) {\n                emailInput = input.closest('[name=user_email]')\n                console.log(emailInput)\n                emailInput = emailInput.value\n                console.log(emailInput)\n            }\n            if(input.closest('[name=user_message]')) {\n                messageInput = input.closest('[name=user_message]')\n                messageInput = messageInput.value\n            }\n        })\n\n        testNameInput = testName.test(nameInput)\n        console.log(testNameInput)\n        testPhoneInput = testPhone.test(phoneInput)\n        console.log(testPhoneInput)\n        testMessageInput = testMessage.test(messageInput)\n        console.log(testMessageInput)\n\n        if(nameInput == '' || emailInput == '' || phoneInput == '' || messageInput == '') {\n            //alert('Будьте любезны, заполните все поля')         \n            return success\n        }\n\n        if (messageInput === undefined && testNameInput && testPhoneInput) {\n            success = true\n            console.log('Отправка из первой формы или модального успешна')\n        } else if (messageInput && testMessageInput && testNameInput && testPhoneInput) {\n            success = true\n            console.log('Отправка из второй формы с заполненным меседжем успешна') \n        } else if (messageInput === '') {\n            success = true\n            console.log('Отправка из второй формы с пустым меседжем успешна') \n        }\n         else {\n            console.log(success)\n        }\n        return successText\n    }\n\n    const sendData = (data) => {\n        return fetch('https://jsonplaceholder.typicode.com/posts', { \n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(res => res.json())\n    }\n    const submitForm = () => {\n        const formElements = form.querySelectorAll('input')\n\n        const formData = new FormData(form) \n        const formBody = {}\n        statusBlock.textContent = loadText \n        form.append(statusBlock)\n        formData.forEach((value, key) => {\n            formBody[key] = value\n        })\n        someElem.forEach(elem => {\n        const element = document.getElementById(elem.id)\n        if (elem.type === 'block') {\n            formBody[elem.id] = element.textContent\n        } else if (elem.type === 'input') {\n            formBody[elem.id] = element.value\n        }\n        })\n        console.log('submit')\n \n        if(validate(formElements)) {\n            sendData(formBody).then(data => {\n                statusBlock.textContent = successText\n                statusBlock.style.color = '#00FA9A'\n                formElements.forEach(input => {\n                    input.value = ''\n                })\n            })\n            .catch (error => {\n                statusBlock.textContent = errorText\n            })\n            //alert ('Данные отправлены')\n        } else {\n            //alert ('Данные не валидные')\n            statusBlock.style.color = '#ed4e4e'\n            statusBlock.textContent = 'Заполните, пожалуйста, все поля'\n        }       \n    }\n    try {\n        if(!form) {\n            throw new Error('Верните форму на место!')\n        }\n        form.addEventListener('submit', (e) => {\n            e.preventDefault()\n            submitForm()\n        })\n    } catch (error) {\n        console.log(error.message)\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendForm);\n\n\n\n//модуль для отправки форм\n\n/*const sendForm = ({ formId, someElem = [] }) => { //сразу примем id\n    const form = document.getElementById(formId) //получим эту форму со страницы\n\n    const statusBlock = document.createElement('div') //создадим новый блок, который будет оповещать нас о том, что загрузка началась\n    //и несколько вариантов текста\n    const loadText = 'Загрузка...'\n    const errorText = 'Ошибка...'\n    const successText = 'Спасибо! Наш менеджер с вами свяжется'\n\n    //создадим новую функцию validate()\n    /****ПЕРВЫЙ ВАРИАНТ КАК МОЖНО СДЕЛАТЬ ПРОВЕРКУ НА ВВОДИМЫЕ ЗНАЧЕНИЯ\n         * \n    const validate = (list) => {\n        let success = true // создаем изменяемую переменную для проверки правильности вводимых данных\n        \n        list.forEach(input => { //переберем весь нодЛист с инпутами в данной форме и дадим условие\n            if(!input.classList.contains('success')) { // если класс хотябы одного из инпутов не имеет success\n                success = false //то success = false и отправка не произойдёт\n            }\n        })\n        return success //делаем возврат success\n        ****/\n        /****ВТОРОЙ ВАРИАНТ КАК МОЖНО СДЕЛАТЬ ПРОВЕРКУ НА ВВОДИМЫЕ ЗНАЧЕНИЯ\n         \n    const validate = (list) => {\n        let success = false // создаем изменяемую переменную для проверки правильности вводимых данных\n\n            const testPhone = /^[0-9()-\\+]+/;\n            const testName = /^[а-яё ]+$/i\n            const testMessage =/^[а-яё0-9 \\-\\?!.,;:]+$/gi //создаем регулярки\n\n            let nameInput //создаю переменные на каждый инпут для дальнейшей работы\n            let testNameInput //создаю переменную теста инпута\n/*             let emailInput\n            let testEmailInput  \n            let phoneInput\n            let testPhoneInput\n            let messageInput\n            let testMessageInput\n\n          list.forEach(input => { //делаю перебор всех инпутов для того, что бы с ними работать\n\n            if(input.closest('[name=user_name]')) { //ищу инпут методом клосест по нахождению в его имени нужных слов\n                nameInput = input.closest('[name=user_name]')\n                nameInput = nameInput.value\n            }\n/*             if(input.closest('[name=user_email]')) {\n                emailInput = input.closest('[name=user_email]')\n                emailInput = emailInput.value\n            } \n            if(input.closest('[name=user_phone]')) {\n                phoneInput = input.closest('[name=user_phone]')\n                phoneInput = phoneInput.value\n            }\n            if(input.closest('[name=user_message]')) {\n                messageInput = input.closest('[name=user_message]')\n                messageInput = messageInput.value\n            }\n        })\n\n        testNameInput = testName.test(nameInput) //делаю тест значения инпута на валидность\n        console.log(testNameInput)\n        testPhoneInput = testPhone.test(phoneInput)\n        console.log(testPhoneInput)\n        testMessageInput = testMessage.test(messageInput)\n        console.log(testMessageInput)\n\n        if (messageInput === undefined && testNameInput && testPhoneInput) { //в первой форме и модалках значения инпутов сообщения и телефона норм, а меседж undefined\n            success = true\n            console.log('Отправка из первой формы и модального успешна') // то тру\n        } else if (messageInput && testMessageInput && testNameInput && testPhoneInput) { // в нижней форме значения инпутов сообщения и телефона и меседжа норм\n            success = true //то тру\n            console.log('Отправка из второй формы с заполненным меседжем успешна') \n        } else if (messageInput === '') {// в нижней форме значения инпутов сообщения и телефона норм а меседжа пустое\n            success = true // то тру\n            console.log('Отправка из второй формы с пустым меседжем успешна') \n        } \n         else {\n            console.log(success)\n        }\n        return success //делаем возврат success\n    }\n    //релизуем функцию sendData()\n\n    const sendData = (data) => { //примет тот объект, который мы будем отправлять\n        return fetch('https://jsonplaceholder.typicode.com/posts', { //настроим параметры\n            method: 'POST', //метод отправки будет ПОСТ\n            body: JSON.stringify(data), //для отправки меняем формат в JSON\n            headers: {\n                \"Content-Type\": \"application/json\" //для отправки в формате JSON\n                //\"Content-Type\": \"multipart/form-data\" //для отправки в формате формДата\n            }\n        }).then(res => res.json()) //обработаем данные \n    }\n    const submitForm = () => {\n        //переменная для получения всех элементов формы\n        const formElements = form.querySelectorAll('input') //соберем Нод лист из элементов формы и передадим его в вызов функции validate\n\n        //console.log(formElements)\n        //Для того, что бы собрать все данные из формы нужно воспользоваться FormData\n        const formData = new FormData(form) //передадим в неё форму, которую хотим отправить (если  в инпуте формы нет name, то не будет корректного отображения)\n        const formBody = {} //создадим пустой объект для сбора данных с формДаты\n        statusBlock.textContent = loadText \n        form.append(statusBlock)// в самый конец формы вставляется блок с текстом loadText\n        formData.forEach((value, key) => { //переберем полученные значения с formData\n            formBody[key] = value //добавляем значения в объект\n        })\n        someElem.forEach(elem => { //переберем массив, который передавали в качестве данных\n        //в этом действии мы можеи вытащить его текстовое содержимое если это блок или значение если это инпут\n        const element = document.getElementById(elem.id)\n            //console.log(element)\n        if (elem.type === 'block') { //условие о том, что тип элемента блок,\n            formBody[elem.id] = element.textContent // то добавляем его текстКонтент к телу запроса\n        } else if (elem.type === 'input') {//условие о том, что тип элемента инпут,\n            formBody[elem.id] = element.value// то добавляем его значение к телу запроса\n        }\n        })\n        console.log('submit')\n    \n        /***ПЕРВЫЙ ВАРИАНТ ВАЛИДАЦИИ \n\n        //для реализации функции validate необходимо сделать условие, что\n        if(validate(formElements)) { //если функция validate будет true\n            sendData(formBody).then(data => {//при отправке формы нужно указать передаваемую formBody или формДата\n                console.log(data)\n            }) //вызовем функцию после нажатия на кнопку отправить - сюда придут уже обработанные данные\n\n            //ТО ПРОИЗВОДИМ ОТПРАВКУ ДАННЫХ\n            //это проверка на заполненность полей или отсутствие класса success\n        } else { //иначе ругаемся алертом \n            alert ('Данные не валидные')\n        }       \n        ***/\n\n        /***ВТОРОЙ ВАРИАНТ ВАЛИДАЦИИ\n\n        if(validate(formElements)) { //если функция validate будет true\n            sendData(formBody).then(data => {//при отправке формы нужно указать передаваемую formBody или формДата\n            //после того, как данные улетели, нам нужно перебрать все инпуты и почистить их value\n                statusBlock.textContent = successText //вставляет текст успеха в случае успеха\n                formElements.forEach(input => { //перебираем \n                    input.value = '' // чистим поля\n                })\n            }) //вызовем функцию после нажатия на кнопку отправить - сюда придут уже обработанные данные\n\n            //ТО ПРОИЗВОДИМ ОТПРАВКУ ДАННЫХ\n            //это проверка на заполненность полей или отсутствие класса success\n            .catch (error => {\n                statusBlock.textContent = errorText //вставляет текст ошибки в случае ошибки\n            })\n            alert ('Данные отправлены')\n        } else { //иначе ругаемся алертом \n            alert ('Данные не валидные')\n        }       \n    }\n\n    //создадим функцию submitForm() и вынесем всю логику по отправку в эту функцию и вызовем её в обработчике \n\n    //ДЛЯ ТОГО, ЧТОБЫ ОБЕЗОПАСИТЬ КОД ИСПОЛЬЗУЕМ СТРУКТУРУ TRY CATCH\n\n    try {\n        //и сделаем проверку\n        if(!form) { //если форма пропадает, то выбрасываем ошибку\n            throw new Error('Верните форму на место!')\n        }\n        form.addEventListener('submit', (e) => { //повешаем слушатель sumbit\n            e.preventDefault() //отменим стандартное поведение кнопки\n            \n            submitForm()\n        })\n    } catch (error) {\n        console.log(error.message)\n    }\n}\n\nexport default sendForm*/\n\n//# sourceURL=webpack:///./modules/sendForm.js?");

/***/ }),

/***/ "./modules/slider.js":
/*!***************************!*\
  !*** ./modules/slider.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n//LESSON 23\n/* const slider = (dot, portfolioBtn, activeSlide = 'portfolio-item-active', dotActive = 'dot-active') => {\n    const sliderBlock = document.querySelector('.portfolio-content');\n    const slides = document.querySelectorAll('.portfolio-item');\n    const timerInterval = 2000;\n    let currentSlide = 0;\n    let interval;\n    let dotContainer = document.querySelector('.portfolio-dots');\n    let dots = [];\n\n    const dotAdd = () => {\n      slides.forEach(() => {\n      const newDot = document.createElement('li');\n        newDot.classList.add(dot);\n        dots.push(newDot);\n        dotContainer.append(newDot);\n        dots[0].classList.add(dotActive);\n      });\n    };  \n    const prevSlide = (elems, index, strClass) => {\n        elems[index].classList.remove(strClass);\n    };\n    const nextSlide = (elems, index, strClass) => { \n        elems[index].classList.add(strClass);\n    };\n    const autoSlide = () => {\n        prevSlide(slides, currentSlide, activeSlide);\n        prevSlide(dots, currentSlide, dotActive);\n        currentSlide++;\n        if (currentSlide >= slides.length) {\n            currentSlide = 0;\n        }\n        nextSlide(slides, currentSlide, activeSlide);\n        nextSlide(dots, currentSlide, dotActive);\n    };\n    const startSlide = (timer = 1500) => {\n        interval = setInterval(autoSlide, timer);\n    };\n    const stopSlide = () => {\n        clearInterval(interval);\n    };\n    sliderBlock.addEventListener('click', (e) => {\n        e.preventDefault();\n        if (e.target.matches(dot)) {\n            return;\n        } else if (e.target.matches(portfolioBtn)) {\n            return;\n        }\n        prevSlide(slides, currentSlide, activeSlide);\n        prevSlide(dots, currentSlide, dotActive);\n        if (e.target.matches('#arrow-right')) {\n            currentSlide++;\n        } else if (e.target.matches('#arrow-left')) {\n            currentSlide--;\n        } else if (e.target.classList.contains(dot)) {\n            dots.forEach((dot, index) => {\n                if (e.target === dot) { \n                    currentSlide = index;\n                }\n            });\n        } \n        if (currentSlide >= slides.length) {\n            currentSlide = 0;\n        }\n        if (currentSlide < 0) {\n            currentSlide = slides.length - 1;\n        }\n        nextSlide(slides, currentSlide, activeSlide);\n        nextSlide(dots, currentSlide, dotActive);   \n    });\n    sliderBlock.addEventListener('mouseenter', (e) => {\n        if (e.target.classList.contains(dot)) {\n            stopSlide();\n        } else if (e.target.classList.contains(portfolioBtn)) {\n            stopSlide();\n        }\n    }, true);\n    sliderBlock.addEventListener('mouseleave', (e) => {\n        if (e.target.classList.contains(dot)) {\n            startSlide(timerInterval);\n        } else if (e.target.classList.contains(portfolioBtn)) {\n            startSlide(timerInterval);\n        }\n        \n    }, true);\n    startSlide(timerInterval);\n    dotAdd();\n  };\n  export default slider; */\n\n   const slider = () => {\n    const sliderBlock = document.querySelector('.portfolio-content');\n    const slides = document.querySelectorAll('.portfolio-item');\n    const timerInterval = 2000;\n    let currentSlide = 0;\n    let interval;\n    let dotContainer = document.querySelector('.portfolio-dots');\n    let dots = [];\n\n    const dotAdd = () => {\n      slides.forEach(() => {\n      const newDot = document.createElement('li');\n        newDot.classList.add('dot');\n        dots.push(newDot);\n        dotContainer.append(newDot);\n        dots[0].classList.add('dot-active');\n      });\n    };  \n    const prevSlide = (elems, index, strClass) => {\n        elems[index].classList.remove(strClass);\n    };\n    const nextSlide = (elems, index, strClass) => { \n        elems[index].classList.add(strClass);\n    };\n    const autoSlide = () => {\n        prevSlide(slides, currentSlide, 'portfolio-item-active');\n        prevSlide(dots, currentSlide, 'dot-active');\n        currentSlide++;\n        if (currentSlide >= slides.length) {\n            currentSlide = 0;\n        }\n        nextSlide(slides, currentSlide, 'portfolio-item-active');\n        nextSlide(dots, currentSlide, 'dot-active');\n    };\n    const startSlide = (timer = 1500) => {\n        interval = setInterval(autoSlide, timer);\n    };\n    const stopSlide = () => {\n        clearInterval(interval);\n    };\n    sliderBlock.addEventListener('click', (e) => {\n        e.preventDefault();\n        if (!e.target.matches('.dot, .portfolio-btn')) {\n            return;\n        }\n        prevSlide(slides, currentSlide, 'portfolio-item-active');\n        prevSlide(dots, currentSlide, 'dot-active');\n        if (e.target.matches('#arrow-right')) {\n            currentSlide++;\n        } else if (e.target.matches('#arrow-left')) {\n            currentSlide--;\n        } else if (e.target.classList.contains('dot')) {\n            dots.forEach((dot, index) => {\n                if (e.target === dot) { \n                    currentSlide = index;\n                }\n            });\n        } \n        if (currentSlide >= slides.length) {\n            currentSlide = 0;\n        }\n        if (currentSlide < 0) {\n            currentSlide = slides.length - 1;\n        }\n        nextSlide(slides, currentSlide, 'portfolio-item-active');\n        nextSlide(dots, currentSlide, 'dot-active');   \n    });\n    sliderBlock.addEventListener('mouseenter', (e) => {\n        if (e.target.matches('.dot, .portfolio-btn')) {\n            stopSlide();\n        }\n    }, true);\n    sliderBlock.addEventListener('mouseleave', (e) => {\n        if (e.target.matches('.dot,.portfolio-btn')) {\n            startSlide(timerInterval);\n            }\n    }, true);\n    startSlide(timerInterval);\n    dotAdd();\n  };\n  /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (slider); \n\n//# sourceURL=webpack:///./modules/slider.js?");

/***/ }),

/***/ "./modules/tabs.js":
/*!*************************!*\
  !*** ./modules/tabs.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst tabs = () => {\n\nconst tabPanel = document.querySelector('.service-header');\nconst tabs = document.querySelectorAll('.service-header-tab');\nconst tabContent = document.querySelectorAll('.service-tab');  //изначально скрыли табы, добавили класс d-none потому что чрезе бутстрап\n\n\n\n\ntabPanel.addEventListener('click', (e) => {\n    if(e.target.closest('.service-header-tab')) { //внутри был спан, поэтому использовали этот метод\n        const tabBtn = e.target.closest('.service-header-tab'); //задали новую переменную для того, что бы указывать её в условии, и тот клик по спану будет давать кнопку и соответственно менять класс\n        tabs.forEach((tab, index) => { //перебираем с индексом, что бы при клике полкчать этот индекс и спользовать его для получения нужного таба, чтобы его отобразить при переключении кнопок\n            if(tab === tabBtn) {\n                tab.classList.add('active');\n                tabContent[index].classList.remove('d-none'); // при переключении кнопок тот или иной Таб появлется\n            } else {\n                tab.classList.remove('active');\n                tabContent[index].classList.add('d-none'); // при переключении кнопок тот или иной Таб скрывается\n            }\n        });\n    }\n});\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tabs);\n\n\n//# sourceURL=webpack:///./modules/tabs.js?");

/***/ }),

/***/ "./modules/timer.js":
/*!**************************!*\
  !*** ./modules/timer.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst timer = (deadline) => {\n\n    /* const timerDays = document.getElementById('timer-days'); */\n    const timerHours = document.getElementById('timer-hours');\n    const timerMinutes = document.getElementById('timer-minutes');\n    const timerSeconds = document.getElementById('timer-seconds');\n\nconst getTimeRemaining = () => {\n    \n    let dateStop = new Date(deadline).getTime();\n    let dateNow = new Date().getTime();\n    let timeRemaining = (dateStop - dateNow) / 1000;\n/*     let days = Math.floor(timeRemaining / 60 / 60 / 24); */\n    let hours = Math.floor((timeRemaining / 60 / 60) /* % 24 */);\n    let minutes = Math.floor((timeRemaining / 60) % 60);\n    let seconds = Math.floor(timeRemaining % 60);\n\n    return { timeRemaining, /* days, */ hours, minutes, seconds };\n};\n/*     let text_forms_days = [' день ', ' дня ', ' дней '];\n    function dayForms (days, text_forms_days) {\n        let n1 = days % 10\n        if(days > 10 && days < 20) {\n            return text_forms_days[2];\n        }\n        if(n1 > 1 && n1 < 5) {\n            return text_forms_days[1];\n        }\n        if(n1 == 1) {\n            return text_forms_days[0];\n        }\n        return text_forms_days[2];\n    } */\n\n    let updateClock = setInterval(() => {\n        let getTime = getTimeRemaining();\n/*         timerDays.textContent = getTime.days + dayForms(getTime.days, text_forms_days); */\n        timerHours.textContent = (getTime.hours < 10) ? '0' + getTime.hours : getTime.hours;\n        timerMinutes.textContent = (getTime.minutes < 10) ? '0' + getTime.minutes : getTime.minutes;\n        timerSeconds.textContent = (getTime.seconds < 10) ? '0' + getTime.seconds : getTime.seconds;\n            if (getTime.timeRemaining === 0 || getTime.timeRemaining < 0) {\n                clearInterval(updateClock);\n                timerHours.textContent = '00';\n                timerMinutes.textContent = '00';\n                timerSeconds.textContent = '00';\n            }\n    }, 1000);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (timer);\n\n\n//1) сначала нужно задать время до которого будет досчитывать таймер - дедлайн\n\n//благодаря объекту date можем высчитать количество миллисекунд до дедлайна и вычитаем из будущего до текущей даты\n\n//# sourceURL=webpack:///./modules/timer.js?");

/***/ }),

/***/ "./modules/validation.js":
/*!*******************************!*\
  !*** ./modules/validation.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst validation = () => {\n\n    const squareForm = document.querySelector('.calc-square');\n    const countForm = document.querySelector('.calc-count');\n    const dayForm = document.querySelector('.calc-day');\n\n    const onlyNumber = (e) => {\n        e.target.value = e.target.value.replace(/\\D+/gi, '');\n    };\n    squareForm.addEventListener('input', onlyNumber);\n    countForm.addEventListener('input', onlyNumber); \n    dayForm.addEventListener('input', onlyNumber); \n\n   //const formBtn = document.querySelectorAll('button[type=submit]'); //кнопки\n    const nameForm = document.querySelectorAll('[id$=\"-name\"]'); //инпуты с именем\n    const secondFormMessage = document.querySelector('#form2-message'); //инпут с сообщением возле футера\n    const emailForm = document.querySelectorAll('.form-email'); //массив с инпутами с мылом\n    const telForm = document.querySelectorAll('.form-phone'); //массив с инпутами с телефонами \n\n    nameForm.forEach(nameItem => {\n        nameItem.addEventListener('blur', (e) => {\n            let testText = /^[а-яё ]+/gi;\n            if (testText.test(e.target.value)) {\n                nameItem.value =  e.target.value.slice(0, 1).toUpperCase(0) + e.target.value.replace(/\\s+/gm, ' ').replace(/[^а-яё ]+/gi, '').slice(1).toLowerCase().replace(/\\s+/gm, ' ')             \n                //рабочая вторая часть\n\n                //+ e.target.value.replace(/\\-+/gm, '-').replace(/\\s+/gm, ' ').slice(1).toLowerCase().replace(/\\-+/gm, '-').replace(/\\s+/gm, ' ') //рабочая вторая часть\n            } else {\n                nameItem.value = e.target.value.replace(/^\\-+/gm, '').replace(/^\\s+/gm, '').replace(/[^а-яА-я]+/gi, '').slice(0, 1).toUpperCase(0).replace(/\\s+/gm, '').replace(/\\-+/gm, '') + e.target.value.replace(/\\s+/gm, ' ').replace(/[^а-яё\\- ]+/gi, '').slice(1).toLowerCase(0).replace(/\\s+/g, ' ');\n\n                //рабочая вторая часть\n               // e.target.value.replace(/\\-+/gm, '-').replace(/\\s+/gm, ' ').replace(/[^а-яё\\- ]+/gi, '').slice(1).toLowerCase().replace(/\\-+/gm, '-').replace(/\\s+/gm, ' ');//рабочая вторая часть\n            }\n        });\n    //    nameItem.addEventListener('input', (e) => {\n    //        e.target.value = e.target.value.replace(/[^а-яА-я\\-\\s]+/gi, '');\n    //    });\n    });\n    secondFormMessage.addEventListener('input', (e) => {\n        e.target.value = e.target.value.match(/[а-яё0-9 \\-\\.,;:?!]+/gi);\n    })\n    emailForm.forEach(emailItem => {\n            emailItem.addEventListener('blur', (e) => {\n            let testEmail = /[a-z0-9~*!'_\\-\\.]*@[\\w-]+\\.\\w{2,4}/gi;\n            if (testEmail.test(e.target.value)){\n                emailItem.value = e.target.value\n            } else {\n                emailItem.value = e.target.value.replace(/[а-яё]+/gi, '').replace(/@+/g, '@').replace(/^[\\-\\s]+/g, '').replace(/[\\-\\s]+$/g, '');\n            } \n        }); \n    })\n    telForm.forEach(telItem => {\n          telItem.addEventListener('blur', (e) => {\n            let testTel = /(\\+7|8)[(]?(\\d{3})[)]?(\\d{3})[-]?(\\d{2})[-]?(\\d{2})/g;\n            if (testTel.test(e.target.value)){\n                telItem.value = e.target.value\n            } else {\n                telItem.value = e.target.value.replace(/[а-яa-z]+/g, '').replace(/\\++/g, '+').replace(/\\-+/g, '-').replace(/[^\\d\\(\\)\\-\\+]+/g, '').replace(/^[\\-\\s]+/gm, '').replace(/[\\-\\s]+$/gm, '');\n            }\n        }); \n    });\n    \n    /****ПОПЫТКА ЧЕРЕЗ МАССИВ */\n\n     /* formBtn.forEach(itemBtn => itemBtn.addEventListener('submit', (e) => {\n        e.preventDefault();\n        let isError = false;\n        arrayInputText.forEach(inputTextItem => {\n            if (!/[^а-яА-я\\-\\s]+/g.test(inputTextItem.value) && inputTextItem.value !== '') {\n            } else {\n                isError = true;\n            }\n        });\n        emailForm.forEach(emailItem => {\n            let isError = false;\n            if (/([a-zA-Z_!*'~\\+-.]+(\\.[a-zA-Z_!*'~\\+-.])*@[a-zA-Z]+(\\.[a-zA-Z]+))/gi.test(emailItem.value) && emailItem.value !== '') {\n            } else {\n                isError = true;\n            }\n        });\n        telForm.forEach(telItem => {\n            let isError = false;\n            if (/^[0-9()-]{6,}/gi.test(telItem.value) && telItem.value !== '') {\n            } else {\n                isError = true;\n            }\n        });\n            if (!isError) {\n        }\n    }));   */\n\n        //first\n    //const firstFormName = document.querySelector('#form1-name'); //type text\n    //const firstFormEmail = document.querySelector('#form1-email'); //type email\n    //const firstFormTel = document.querySelector('#form1-phone'); //type tel\n        //second\n    //const secondFormName = document.querySelector('#form2-name'); //type text\n    //const secondFormEmail = document.querySelector('#form2-email'); //type email\n    //const secondFormTel = document.querySelector('#form2-phone'); //type tel\n    //const secondFormMessage = document.querySelector('#form2-message'); //type text\n       //third\n    //const thirdFormName = document.querySelector('#form3-name'); //type text\n    //const thirdFormEmail = document.querySelector('#form3-email'); //type email\n    //const thirdFormTel = document.querySelector('#form3-phone'); //type tel\n\n/*     const firstFormName = document.querySelector('#form1-name');\n    const firstFormEmail = document.querySelector('#form1-email'); //type email\n    const firstFormTel = document.querySelector('#form1-phone');\n    const formBtn = document.querySelectorAll('button[type=submit]')\n    \n    console.log(formBtn.forEach(itemBtn => itemBtn.addEventListener('submit', (e) => {\n        e.preventDefault();\n        let isError = false;\n            if (!/[^а-яА-я\\-\\s]/g.test(firstFormName.value) && firstFormName.value !== '') {\n            } else {\n                isError = true;\n            }\n            if (/([a-zA-Z_!*'~\\+-.]+(\\.[a-zA-Z_!*'~\\+-.])*@[a-zA-Z]+(\\.[a-zA-Z]+))/gi.test(firstFormEmail.value) && firstFormEmail.value !== '') {\n            } else {\n                isError = true;\n            }\n            if (/[\\d\\-\\)\\(]{6,}/gi.test(firstFormTel.value) && firstFormTel.value !== '') {\n            } else {\n                isError = true;\n            }\n            if (!isError) {\n            }\n        })\n    ))  */\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validation);\n\n\n//# sourceURL=webpack:///./modules/validation.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;